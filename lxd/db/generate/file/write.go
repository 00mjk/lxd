package file

import (
	"fmt"
	"io/ioutil"
	"os"
	"strings"

	"github.com/pkg/errors"
)

// BuildComment includes the necessary comments for building. The extra new line at the end is required.
const BuildComment = `//go:build linux && cgo && !agent
// +build linux,cgo,!agent

`

// Reset an auto-generated source file, writing a new empty file header.
func Reset(path string, imports []string) error {
	if err := resetInterface(path, imports); err != nil {
		return err
	}

	content := fmt.Sprintf(`%spackage %s

// The code below was generated by %s - DO NOT EDIT!

import (
`, BuildComment, os.Getenv("GOPACKAGE"), os.Args[0])

	for _, uri := range imports {
		content += fmt.Sprintf("\t%q\n", uri)
	}

	content += ")\n\n"

	// FIXME: we should only import what's needed.
	content += "var _ = api.ServerEnvironment{}\n"

	bytes := []byte(content)

	var err error

	if path == "-" {
		_, err = os.Stdout.Write(bytes)
	} else {
		err = ioutil.WriteFile(path, []byte(content), 0644)
	}

	if err != nil {
		errors.Wrapf(err, "Reset target source file '%s'", path)
	}

	return nil
}

func resetInterface(path string, imports []string) error {
	if strings.HasSuffix(path, "mapper.go") {
		parts := strings.Split(path, ".")
		interfacePath := strings.Join(parts[:len(parts)-2], ".") + ".interface.mapper.go"
		content := fmt.Sprintf("%spackage %s", BuildComment, os.Getenv("GOPACKAGE"))
		err := ioutil.WriteFile(interfacePath, []byte(content), 0644)
		return err
	}
	return nil
}

// Append a code snippet to a file.
func Append(path string, snippet Snippet) error {
	if err := appendInterface(path, snippet); err != nil {
		return err
	}

	buffer := newBuffer()
	buffer.N()

	err := snippet.Generate(buffer)
	if err != nil {
		return errors.Wrap(err, "Generate code snippet")
	}

	var file *os.File

	if path == "-" {
		file = os.Stdout
	} else {
		file, err = os.OpenFile(path, os.O_APPEND|os.O_WRONLY, 0644)
		if err != nil {
			return errors.Wrapf(err, "Open target source code file '%s'", path)
		}
		defer file.Close()
	}

	bytes, err := buffer.code()
	if err != nil {
		return err
	}

	_, err = file.Write(bytes)
	if err != nil {
		return errors.Wrapf(err, "Append snippet to target source code file '%s'", path)
	}

	return nil
}

func appendInterface(path string, snippet Snippet) error {
	if !strings.HasSuffix(path, ".mapper.go") {
		return nil
	}
	parts := strings.Split(path, ".")
	interfacePath := strings.Join(parts[:len(parts)-2], ".") + ".interface.mapper.go"

	buffer := newBuffer()

	file, err := os.OpenFile(interfacePath, os.O_WRONLY, 0644)
	if err != nil {
		return errors.Wrapf(err, "Open target source code file '%s'", interfacePath)
	}
	defer file.Close()

	err = snippet.GenerateSignature(buffer)
	if err != nil {
		return errors.Wrap(err, "Generate interface snippet")
	}

	bytes, err := buffer.code()
	if err != nil {
		return err
	}
	stat, err := file.Stat()
	if err != nil {
		return errors.Wrapf(err, "could not get file info for path %q", interfacePath)
	}

	content := fmt.Sprintf("%spackage %s", BuildComment, os.Getenv("GOPACKAGE"))
	firstWrite := stat.Size() == int64(len(content))
	if firstWrite {
		// If this is the first signature write to the file, append the whole thing.
		_, err = file.WriteAt(bytes, stat.Size())
	} else {
		// If an interface already exists, just append the method, omitting everything before the first '{'.
		startIndex := 0
		for i := range bytes {
			// type ObjectGenerated interface {
			if string(bytes[i]) == "{" {
				startIndex = i + 1
				break
			}
		}
		// overwrite the closing brace.
		_, err = file.WriteAt(bytes[startIndex:], stat.Size()-2)
	}
	if err != nil {
		return errors.Wrapf(err, "Append snippet to target source code file '%s'", interfacePath)
	}

	return nil
}
